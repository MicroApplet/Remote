kind: pipeline
type: docker
name: gateway


steps: # 定义流水线执行步骤，这些步骤将顺序执行
  - name: package # 流水线名称
    image: maven:3.8.6-openjdk-8 # 定义创建容器的Docker镜像
    pull: if-not-exists
    volumes: # 将容器内目录挂载到宿主机，仓库需要开启Trusted设置
      - name: maven-build
        path: /app/build # 将应用打包好的Jar和执行脚本挂载出来
      - name: maven-cache
        path: /root/.m2
      - name: ssh-cache
        path: /root/.ssh
    commands: # 定义在Docker容器中执行的shell命令
      # 开始打包maven工程
      - mvn clean package -Dmaven.test.skip=true -Dmaven.source.skip=true -Dmaven.javadoc.skip=true
      - cp remote-net-proxy/target/RemoteProxy.jar /app/build/RemoteProxy.jar
      - cp *.sh /app/build
      - cp Dockerfile /app/build/Dockerfile

  - name: build-start
    image: appleboy/drone-ssh # SSH工具镜像
    settings:
      host:
        from_secret: ssh_host
      username:
        from_secret: ssh_username
      password:
        from_secret: ssh_password # 从Secret中读取SSH密码
      port: 22 # 远程连接端口
      command_timeout: 5m # 远程执行命令超时时间
      script:
        - cd /home/asialjim/.DroneImage/maven/build # 进入宿主机构建目录
        - chmod +x run.sh # 更改为可执行脚本
        - ./run.sh # 运行脚本打包应用镜像并运行

volumes: # 定义流水线挂载目录，用于共享数据
  - name: maven-cache
    host:
      path: /home/asialjim/.m2
  - name: ssh-cache
    host:
      path: /home/asialjim/.ssh
  - name: docker
    host:
      path: /var/run/docker.sock
  - name: maven-build
    host:
      path: /home/asialjim/.app/docker/gitee/MicroApplet/Remote
  - name: env
    host:
      path: /home/asialjim/.env